program ::= declaration* EOF

# no variable decl - assignment is declaration so it's an expression statement
# todo: maybe arrays should behave the same? otoh i haven't changed my expression grammar since
# 1870 and i'm not starting now
declaration ::= funDecl | procDecl | classDecl | arrayDecl | statement

statement ::= exprStmt
                | globalStmt
                | forStmt
                | whileStmt
                | doStmt
                | ifStmt
                | switchStmt

return ::= "return" expression

exprStmt ::= expression

expression ::= assignment

assignment ::= ((call ".")? IDENTIFIER "=" assignment) | logicOr
logicOr ::= logicAnd ("OR" logicAnd)*
logicAnd ::= equality ("AND" equality)*
equality ::= comparison (("==" | "!=") comparison)*
comparison ::= term (("<" | "<=" | ">" | ">=") term)*
term ::= factor (("+" | "-") factor)*
factor ::= unary (("*" | "/") unary)*
unary ::= ("NOT" | "-" | "new") unary | call
call ::= primary ("(" arguments? ")" | "." IDENTIFIER)*
primary ::= "self" | STRING | INT | FLOAT | IDENTIFIER | "(" expression ")"
            | "super" "." IDENTIFIER

funDecl ::= "function" IDENTIFIER "(" parameters? ")" (statement | return)* "endfunction"
procDecl ::= "procedure" IDENTIFIER "(" parameters? ")" statement* "endprocedure"

singleParameter ::= IDENTIFIER (":" "byVal" | "byRef")?
parameters ::= singleParameter  ("," singleParameter)*
arguments ::= expression ("," expression)*